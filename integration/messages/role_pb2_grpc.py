# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import messages.role_pb2 as role__pb2


class RoleStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.getAccess = channel.unary_unary(
                '/rolepb.Role/getAccess',
                request_serializer=role__pb2.LoginRequest.SerializeToString,
                response_deserializer=role__pb2.TokenResponse.FromString,
                )
        self.getRole = channel.unary_unary(
                '/rolepb.Role/getRole',
                request_serializer=role__pb2.AuthorizeRequest.SerializeToString,
                response_deserializer=role__pb2.RoleResponse.FromString,
                )
        self.getRoleList = channel.unary_unary(
                '/rolepb.Role/getRoleList',
                request_serializer=role__pb2.AuthorizeRequest.SerializeToString,
                response_deserializer=role__pb2.RoleResponseList.FromString,
                )


class RoleServicer(object):
    """Missing associated documentation comment in .proto file."""

    def getAccess(self, request, context):
        """option (google.api.http) = {
        post: "/v1/echo"
        body: "*"
        };
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getRole(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getRoleList(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RoleServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'getAccess': grpc.unary_unary_rpc_method_handler(
                    servicer.getAccess,
                    request_deserializer=role__pb2.LoginRequest.FromString,
                    response_serializer=role__pb2.TokenResponse.SerializeToString,
            ),
            'getRole': grpc.unary_unary_rpc_method_handler(
                    servicer.getRole,
                    request_deserializer=role__pb2.AuthorizeRequest.FromString,
                    response_serializer=role__pb2.RoleResponse.SerializeToString,
            ),
            'getRoleList': grpc.unary_unary_rpc_method_handler(
                    servicer.getRoleList,
                    request_deserializer=role__pb2.AuthorizeRequest.FromString,
                    response_serializer=role__pb2.RoleResponseList.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'rolepb.Role', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Role(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def getAccess(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rolepb.Role/getAccess',
            role__pb2.LoginRequest.SerializeToString,
            role__pb2.TokenResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getRole(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rolepb.Role/getRole',
            role__pb2.AuthorizeRequest.SerializeToString,
            role__pb2.RoleResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getRoleList(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rolepb.Role/getRoleList',
            role__pb2.AuthorizeRequest.SerializeToString,
            role__pb2.RoleResponseList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
